{"version":3,"sources":["actions/types.js","registerServiceWorker.js","reducers/index.js","Spinner.js","index.js","firebase.js","actions/index.js"],"names":["SET_USER","CLEAR_USER","CACHE_USER_DATA","SET_CURRENT_CHANNEL","SET_PRIVATE_CHANNEL","SET_USER_POSTS","SET_COLORS","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","initialUserState","currentUser","isLoading","intialCache","userList","initialChannelState","currentChannel","isPrivateChannel","initilaColorsSate","primaryColor","secondaryColor","rootReducer","combineReducers","user","action","type","actionTypes","payload","channel","userPosts","colors","userCache","Spinner","Dimmer","active","Loader","size","content","App","lazy","Login","Register","store","createStore","composeWithDevTools","Root","document","title","firebase","auth","onAuthStateChanged","props","setUser","history","push","clearUser","database","ref","on","snap","data","userId","key","userData","val","cacheUserData","updatedData","reduce","acc","this","fallback","exact","path","component","React","Component","RootWithAuth","withRouter","connect","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","databaseURL","analytics","setCurrentChannel","setPrivateChannel","setUserPosts","setColors"],"mappings":"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","file":"static/js/main.84e01246.chunk.js","sourcesContent":["export const SET_USER = 'SET_USER';\r\nexport const CLEAR_USER = 'CLEAR_USER';\r\nexport const CACHE_USER_DATA = 'CACHE_USER_DATA';\r\n\r\nexport const SET_CURRENT_CHANNEL = \"SET_CURRENT_CHANNEL\";\r\nexport const SET_PRIVATE_CHANNEL = \"SET_PRIVATE_CHANNEL\";\r\nexport const SET_USER_POSTS = \"SET_USER_POST\";\r\n\r\nexport const SET_COLORS = \"SET_COLORS\";","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport * as actionTypes from '../actions/types';\r\n\r\nconst initialUserState = {\r\n    currentUser: null,\r\n    isLoading: true\r\n};\r\n\r\nconst intialCache = {\r\n    userList: [],\r\n    isLoading: true\r\n}\r\n\r\nconst initialChannelState = {\r\n    currentChannel: null,\r\n    isPrivateChannel: false\r\n};\r\n\r\nconst initilaColorsSate = {\r\n    primaryColor: '#201d38',\r\n    secondaryColor: '#8244FF'\r\n}\r\n\r\nconst user_reducer = (state = initialUserState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                currentUser: action.payload.currentUser,\r\n                isLoading: false\r\n            };\r\n        case actionTypes.CLEAR_USER:\r\n            return {\r\n                ...state,\r\n                isLoading: false\r\n            }\r\n        case actionTypes.CACHE_USER_DATA:\r\n            return {\r\n                ...state,\r\n\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst user_cache_reducer = (state = intialCache, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.CACHE_USER_DATA:\r\n            return {\r\n                ...state,\r\n                userList: action.payload.userList\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst channel_reducer = (state = initialChannelState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_CURRENT_CHANNEL:\r\n            return {\r\n                ...state,\r\n                currentChannel: action.payload.currentChannel\r\n            }\r\n        case actionTypes.SET_PRIVATE_CHANNEL:\r\n            return {\r\n                ...state,\r\n                isPrivateChannel: action.payload.isPrivateChannel\r\n            }\r\n        case actionTypes.SET_USER_POSTS:\r\n            return {\r\n                ...state,\r\n                userPosts: action.payload.userPosts\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst color_reducer = (state = initilaColorsSate, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_COLORS:\r\n            return {\r\n                primaryColor: action.payload.primaryColor,\r\n                secondaryColor: action.payload.secondaryColor\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    user: user_reducer,\r\n    channel: channel_reducer,\r\n    colors: color_reducer,\r\n    userCache: user_cache_reducer\r\n});\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport { Loader, Dimmer } from 'semantic-ui-react';\r\n\r\nconst Spinner = () => (\r\n    <Dimmer active>\r\n        <Loader size=\"huge\" content={'Preparing chat..'} />\r\n    </Dimmer>\r\n)\r\n\r\nexport default Spinner;","import React, { Suspense, lazy } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from \"./components/App\";\n// import Login from \"./components/Auth/Login\";\n// import Register from \"./components/Auth/Register\";\n\nconst App = lazy(() => import(\"./components/App\"));\nconst Login = lazy(() => import(\"./components/Auth/Login\"));\nconst Register = lazy(() => import(\"./components/Auth/Register\"));\n\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport firebase from \"./firebase\"\n\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { BrowserRouter as Router, Switch, Route, withRouter } from \"react-router-dom\";\n\nimport { createStore } from 'redux';\nimport { Provider, connect } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { setUser, clearUser, cacheUserData } from \"./actions\";\nimport rootReducer from \"./reducers\";\nimport Spinner from \"./Spinner\";\n\nconst store = createStore(rootReducer, composeWithDevTools())\n\nclass Root extends React.Component {\n  componentDidMount() {\n    document.title = 'Secret Society';\n\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.props.setUser(user);\n        this.props.history.push('/');\n      } else {\n        this.props.history.push('/login');\n        this.props.clearUser();\n      }\n    });\n\n    const userList = []\n\n    firebase.database().ref('users')\n      .on('child_added', snap => {\n        const data = {\n          userId: snap.key,\n          userData: snap.val()\n        }\n\n        userList.push(data);\n        this.props.cacheUserData(userList);\n      });\n\n    firebase.database().ref('users')\n      .on('child_changed', snap => {\n        const data = {\n          userId: snap.key,\n          userData: snap.val()\n        }\n\n        const updatedData = userList.reduce((acc, user) => {\n          if (user.userId === data.userId) {\n            acc.push(data);\n          } else {\n            acc.push(user);\n          }\n\n          return acc;\n        }, []);\n        this.props.cacheUserData(updatedData);\n      });\n  }\n\n  render() {\n    return this.props.isLoading ? <Spinner /> : (\n      <Router>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Switch>\n            <Route exact path=\"/\" component={App} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/register\" component={Register} />\n          </Switch>\n        </Suspense>\n      </Router>\n    );\n  }\n}\n\nconst mapStatesToProps = (state) => ({\n  isLoading: state.user.isLoading\n});\n\nconst RootWithAuth = withRouter(connect(mapStatesToProps, { setUser, clearUser, cacheUserData })(Root));\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <RootWithAuth />\n    </Router>\n  </Provider>\n  , document.getElementById(\"root\"));\nregisterServiceWorker();\n","import firebase from \"firebase\";\r\n\r\nimport 'firebase/analytics';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDVs8ZbX5mSHcDonfm9aFwxnuBBQgn54Pg\",\r\n    authDomain: \"react-slack-24c40.firebaseapp.com\",\r\n    projectId: \"react-slack-24c40\",\r\n    storageBucket: \"react-slack-24c40.appspot.com\",\r\n    messagingSenderId: \"428423241774\",\r\n    appId: \"1:428423241774:web:e1da556171031d9ad1ffbf\",\r\n    measurementId: \"G-8T8NPL74F6\",\r\n    databaseURL: \"https://react-slack-24c40-default-rtdb.asia-southeast1.firebasedatabase.app/\",\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\nexport default firebase;","import * as actionTypes from './types';\r\n\r\nexport const setUser = user => {\r\n    return {\r\n        type: actionTypes.SET_USER,\r\n        payload: {\r\n            currentUser: user\r\n        }\r\n    }\r\n}\r\n\r\nexport const clearUser = () => {\r\n    return {\r\n        type: actionTypes.CLEAR_USER\r\n    }\r\n}\r\n\r\n\r\nexport const cacheUserData = (userList) => {\r\n    return {\r\n        type: actionTypes.CACHE_USER_DATA,\r\n        payload: {\r\n            userList: userList\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const setCurrentChannel = (channel) => {\r\n    return {\r\n        type: actionTypes.SET_CURRENT_CHANNEL,\r\n        payload: {\r\n            currentChannel: channel\r\n        }\r\n    }\r\n}\r\n\r\nexport const setPrivateChannel = isPrivateChannel => {\r\n    return {\r\n        type: actionTypes.SET_PRIVATE_CHANNEL,\r\n        payload: {\r\n            isPrivateChannel: isPrivateChannel\r\n        }\r\n    }\r\n}\r\n\r\nexport const setUserPosts = userPosts => {\r\n    return {\r\n        type: actionTypes.SET_USER_POSTS,\r\n        payload: {\r\n            userPosts: userPosts\r\n        }\r\n    }\r\n}\r\n\r\nexport const setColors = (primaryColor, secondaryColor) => {\r\n    return {\r\n        type: actionTypes.SET_COLORS,\r\n        payload: {\r\n            primaryColor: primaryColor,\r\n            secondaryColor: secondaryColor\r\n        }\r\n    }\r\n}"],"sourceRoot":""}