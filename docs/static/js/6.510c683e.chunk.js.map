{"version":3,"sources":["components/ColorPanel/ColorPanel.js","components/SidePanel/UserPanel.js","components/SidePanel/Channels.js","components/SidePanel/DirectMessages.js","components/SidePanel/Starred.js","components/SidePanel/SidePanel.js","components/Messages/MessagesHeader.js","components/Messages/FileModal.js","components/Messages/ProgressBar.js","components/Messages/MessageForm.js","components/Messages/Message.js","components/Messages/Typing.js","components/Messages/Skeleton.js","components/Messages/Messages.js","components/MetaPanel/MetaPanel.js","components/App.js"],"names":["ColorPanel","state","modal","primary","secondary","user","props","currentUser","usersRef","firebase","database","ref","userColors","addListener","userId","child","on","snap","unshift","val","setState","removeListeners","uid","off","openModal","closeModal","handleChangePrimary","color","hex","handleChangeSecondary","handleSavedColor","saveColors","push","update","then","catch","err","console","log","displayUserColors","colors","length","map","i","Fragment","Divider","className","onClick","setColors","style","background","this","Sidebar","as","Menu","icon","inverted","vertical","visible","width","Button","size","Modal","basic","open","onClose","Header","Content","Segment","Label","marginBottom","content","onChange","Actions","Icon","name","React","Component","connect","UserPanel","previewImage","croppedImage","blob","storageRef","storage","userRef","auth","metadata","contentType","uploadedCroppedImage","isAvatarUploading","dropdownOptions","key","text","displayName","disabled","handleSignout","signOut","handleChange","event","file","target","files","reader","FileReader","readAsDataURL","addEventListener","result","handleCropImage","avatarEditor","getImageScaledToCanvas","toBlob","imageUrl","URL","createObjectURL","uploadCroppedImage","put","getDownloadURL","downloadURL","changeAvatar","updateProfile","photoURL","avatar","primaryColor","Grid","Column","Row","padding","margin","floated","Dropdown","trigger","Image","src","spaced","options","Input","fluid","type","label","centered","stackable","columns","marginTop","image","height","border","node","Channels","channel","channels","channelName","channelDetails","channelsRef","messagesRef","typingRef","notifications","firstLoad","activeChannel","addListeners","loadedChannels","addNotificationListeners","channelId","handleNotifications","id","currentChannelId","lastTotal","index","findIndex","notification","total","numChildren","count","lastKnowTotal","forEach","setFirstChannel","firstChannel","setCurrentChannel","value","addChannel","newChannel","details","createdBy","getNotificationCount","displayChannels","Item","changeChannel","opacity","active","setActiveChannel","setPrivateChannel","remove","clearNotifications","updatedNotifications","handleSubmit","preventDefault","isFormValid","cursor","Form","onSubmit","Field","DirectMessages","users","connectedRef","presenceRef","remvoeListeners","currentUserUid","loadedUsers","set","onDisconnect","addStatusToUser","connected","updatedUsers","reduce","acc","concat","isUserOnline","status","channelData","getChannelId","fontStyle","Starred","starredChannels","starredChannel","channelToRemove","filteredChannels","filter","SidePanel","fixed","fontSize","MessagesHeader","numUniqUsers","handleSearchChange","searchLoading","isPrivateChannel","handleStar","isChannelStarred","clearing","Subheader","placeholder","loading","FileModal","authorized","addFile","sendFile","uploadFile","isAuthorized","mime","lookup","clearFile","filename","includes","ProgressBar","uploadState","percentUploaded","Progress","percent","progress","indicating","MessageForm","message","currentChannel","errors","uploadTask","emojiPicker","handleKeyDown","keyCode","sendMessage","removeTypingRef","createMessage","fileUrl","timestamp","ServerValue","TIMESTAMP","getMessagesRef","error","getPath","pathToUpload","filePath","uuidv4","Math","round","bytesTransferred","totalBytes","snapshot","downloadUrl","sendFileMessage","handleTogglePicker","colonToUnicode","replace","x","emoji","emojiIndex","emojis","unicode","native","handleAddEmoji","oldMessage","newMessage","colons","setTimeout","messageInputRef","focus","cancel","title","autoFocus","onSelect","labelPosition","onKeyDown","some","toLowerCase","Group","widths","isOwnMessage","isImage","hasOwnProperty","Message","Comment","Avatar","Author","Metadata","moment","fromNow","Text","Typing","Skeleton","Messages","privateMessagesRef","privateChannel","messages","messagesLoading","searchTerm","searchResults","userList","typingUsers","listeners","scrollToBottom","messagesEnd","scrollIntoView","behavior","addMessageListener","addUserStarsListeners","addTypingListeners","addToListeners","listener","newListener","loadedMessages","postCreator","getPostCreator","userData","countUniqUsers","countUserPosts","find","listedUser","once","data","prevStarred","Object","keys","uniqUsers","userPosts","setUserPosts","displayMessages","displayChannelName","handleSearchMessages","channelMessages","regex","RegExp","match","prevState","starChannel","displayTypingUsers","display","alignItems","displayMessageSkeleton","Array","_","nextProps","prevProps","MetaPanel","activeIndex","getChannelCreator","setActiveIndex","titleProps","newIndex","displayTopPosters","posts","entries","sort","a","b","List","Description","splice","channelCreator","creatorData","attached","Accordion","styled","Title","circular","secondaryColor","userCache","marginLeft","marginRight"],"mappings":"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","file":"static/js/6.510c683e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Sidebar, Menu, Divider, Button, Modal, Icon, Label, Segment } from 'semantic-ui-react';\r\n\r\nimport { SliderPicker } from 'react-color';\r\nimport firebase from \"./../../firebase\";\r\nimport { connect } from 'react-redux';\r\nimport { setColors } from './../../actions';\r\n\r\nclass ColorPanel extends React.Component {\r\n    state = {\r\n        modal: false,\r\n        primary: '',\r\n        secondary: '',\r\n        user: this.props.currentUser,\r\n        usersRef: firebase.database().ref('users'),\r\n        userColors: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.user) {\r\n            this.addListener(this.state.user.uid);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.removeListeners();\r\n    }\r\n\r\n    addListener = (userId) => {\r\n        let userColors = [];\r\n        this.state.usersRef\r\n            .child(`${userId}/colors`)\r\n            .on('child_added', snap => {\r\n                userColors.unshift(snap.val());\r\n\r\n                this.setState({ userColors: userColors })\r\n            });\r\n    }\r\n\r\n    removeListeners = () => {\r\n        this.state.usersRef.child(`${this.state.user.uid}/colors`).off();\r\n    }\r\n\r\n    openModal = () => this.setState({ modal: true });\r\n\r\n    closeModal = () => this.setState({ modal: false });\r\n\r\n    handleChangePrimary = (color) => this.setState({ primary: color.hex });\r\n\r\n    handleChangeSecondary = (color) => this.setState({ secondary: color.hex });\r\n\r\n    handleSavedColor = () => {\r\n        if (this.state.primary && this.state.secondary) {\r\n            this.saveColors(this.state.primary, this.state.secondary);\r\n        }\r\n    }\r\n\r\n    saveColors = (primary, secondary) => {\r\n        this.state.usersRef\r\n            .child(`${this.state.user.uid}/colors`)\r\n            .push()\r\n            .update({\r\n                primary: primary,\r\n                secondary: secondary\r\n            }).then(() => {\r\n                this.closeModal();\r\n            }).catch(err => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    displayUserColors = (colors) => {\r\n        return colors.length > 0 && colors.map((color, i) => (\r\n            <React.Fragment key={i}>\r\n                <Divider />\r\n                <div className=\"color__container\" onClick={() => this.props.setColors(color.primary, color.secondary)}>\r\n                    <div className=\"color__square\" style={{ background: color.primary }}>\r\n                        <div className=\"color__overlay\" style={{ background: color.secondary }}></div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        ));\r\n    }\r\n\r\n    render() {\r\n        const { modal, primary, secondary, userColors } = this.state;\r\n        return (\r\n            <Sidebar as={Menu} icon=\"labeled\" inverted vertical visible width=\"very thin\">\r\n                <Divider />\r\n                <Button icon=\"add\" size=\"small\" color=\"blue\" onClick={this.openModal}></Button>\r\n                {this.displayUserColors(userColors)}\r\n\r\n                <Modal basic open={modal} onClose={this.closeModal}>\r\n                    <Modal.Header></Modal.Header>\r\n\r\n                    <Modal.Content>\r\n                        <Segment inverted>\r\n                            <Label style={{ marginBottom: '20px' }} content=\"Primary Color\"></Label>\r\n                            <SliderPicker color={primary} onChange={this.handleChangePrimary} />\r\n                        </Segment>\r\n\r\n                        <Segment inverted>\r\n                            <Label style={{ marginBottom: '20px' }} content=\"Secondary Color\"></Label>\r\n                            <SliderPicker color={secondary} onChange={this.handleChangeSecondary} />\r\n                        </Segment>\r\n                    </Modal.Content>\r\n\r\n                    <Modal.Actions>\r\n                        <Button color=\"green\" onClick={this.handleSavedColor} inverted><Icon name=\"checkmark\" /> Save Colors</Button>\r\n                        <Button color=\"red\" onClick={this.closeModal} inverted><Icon name=\"remove\" /> Cancel </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </Sidebar>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, { setColors })(ColorPanel);","import React from \"react\";\r\nimport firebase from \"./../../firebase\";\r\nimport { Dropdown, Grid, Header, Icon, Image, Modal, Input, Button } from \"semantic-ui-react\";\r\n\r\nimport AvatarEditor from \"react-avatar-editor\";\r\n\r\nclass UserPanel extends React.Component {\r\n    state = {\r\n        user: this.props.currentUser,\r\n        modal: false,\r\n        previewImage: '',\r\n        croppedImage: '',\r\n        blob: '',\r\n        storageRef: firebase.storage().ref(),\r\n        userRef: firebase.auth().currentUser,\r\n        usersRef: firebase.database().ref('users'),\r\n        metadata: {\r\n            contentType: 'image/jpeg'\r\n        },\r\n        uploadedCroppedImage: '',\r\n        isAvatarUploading: false\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({ user: this.props.currentUser });\r\n    }\r\n\r\n    dropdownOptions = () => [\r\n        {\r\n            key: 'user',\r\n            text: <span>Signed in as <strong>{this.state.user.displayName}</strong></span>,\r\n            disabled: true\r\n        },\r\n        {\r\n            key: 'avatar',\r\n            text: <span onClick={this.openModal}>Change Avatar</span>\r\n        },\r\n        {\r\n            key: 'signout',\r\n            text: <span onClick={this.handleSignout}>Sign Out</span>\r\n        }\r\n    ];\r\n\r\n    openModal = () => this.setState({ modal: true });\r\n\r\n    closeModal = () => this.setState({ modal: false });\r\n\r\n    handleSignout = () => {\r\n        firebase\r\n            .auth()\r\n            .signOut()\r\n            .then(() => {\r\n            });\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        const file = event.target.files[0];\r\n        const reader = new FileReader();\r\n\r\n        if (file) {\r\n            reader.readAsDataURL(file);\r\n            reader.addEventListener('load', () => {\r\n                this.setState({ previewImage: reader.result });\r\n            });\r\n        }\r\n    }\r\n\r\n    handleCropImage = () => {\r\n        if (this.avatarEditor) {\r\n            this.avatarEditor.getImageScaledToCanvas().toBlob(blob => {\r\n                let imageUrl = URL.createObjectURL(blob);\r\n                this.setState({ croppedImage: imageUrl, blob: blob });\r\n            });\r\n        }\r\n    }\r\n\r\n    uploadCroppedImage = () => {\r\n        const { storageRef, userRef, blob, metadata } = this.state;\r\n\r\n        storageRef\r\n            .child(`avatars/users/${userRef.uid}`)\r\n            .put(blob, metadata)\r\n            .then(snap => {\r\n                snap.ref.getDownloadURL().then(downloadURL => {\r\n                    this.setState({ uploadedCroppedImage: downloadURL }, () => {\r\n                        this.changeAvatar();\r\n                    });\r\n                });\r\n            });\r\n    }\r\n\r\n    changeAvatar = () => {\r\n        this.setState({ isAvatarUploading: true });\r\n\r\n        this.state.userRef\r\n            .updateProfile({ photoURL: this.state.uploadedCroppedImage }).then(() => {\r\n                this.setState({ isAvatarUploading: false });\r\n                this.closeModal();\r\n            }).catch(err => {\r\n                console.log(err);\r\n            });\r\n\r\n        this.state.usersRef\r\n            .child(this.state.user.uid)\r\n            .update({ avatar: this.state.uploadedCroppedImage })\r\n            .then(() => {\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { primaryColor, modal, previewImage, croppedImage, isAvatarUploading } = this.state;\r\n\r\n        return (\r\n            <Grid style={{ background: primaryColor }}>\r\n                <Grid.Column>\r\n                    <Grid.Row style={{ padding: 20, margin: 0 }}>\r\n                        <Header inverted floated=\"left\" as=\"h3\">\r\n                            <Icon name=\"user secret\" />\r\n                            <Header.Content>Secret Society</Header.Content>\r\n                        </Header>\r\n\r\n                        <Header style={{ padding: '20px' }} as=\"h4\" inverted>\r\n                            <Dropdown style={{ background: primaryColor }} trigger={\r\n                                <span>\r\n                                    <Image src={this.state.user.photoURL} spaced=\"right\" avatar />\r\n                                    {this.state.user.displayName}\r\n                                </span>\r\n                            } options={this.dropdownOptions()} />\r\n                        </Header>\r\n                    </Grid.Row>\r\n\r\n                    <Modal basic open={modal} onClose={this.closeModal}>\r\n                        <Modal.Header>Change avatar</Modal.Header>\r\n\r\n                        <Modal.Content>\r\n                            <Input onChange={this.handleChange} fluid type=\"file\" label=\"New avatar\" name=\"previewImage\" />\r\n\r\n                            <Grid centered stackable columns={2}>\r\n                                <Grid.Row centered>\r\n                                    <Grid.Column style={{ marginTop: '20px' }} className=\"ui center aligned grid\">\r\n                                        {previewImage && (\r\n                                            <AvatarEditor image={previewImage} width={300} height={300} border={50} ref={node => (this.avatarEditor = node)} />\r\n                                        )}\r\n                                    </Grid.Column>\r\n\r\n                                    <Grid.Column >\r\n                                        {croppedImage && (\r\n                                            <Image style={{ margin: '20px auto' }} width={300} height={300} src={croppedImage} />\r\n                                        )}\r\n                                    </Grid.Column>\r\n                                </Grid.Row>\r\n                            </Grid>\r\n                        </Modal.Content>\r\n\r\n                        <Modal.Actions>\r\n                            {croppedImage && <Button color=\"green\" inverted onClick={this.uploadCroppedImage} disabled={isAvatarUploading}>\r\n                                <Icon name=\"save\" />Change Avatar\r\n                            </Button>}\r\n\r\n                            <Button color=\"green\" inverted onClick={this.handleCropImage}>\r\n                                <Icon name=\"image\" />Preview\r\n                            </Button>\r\n\r\n                            <Button color=\"red\" inverted onClick={this.closeModal}>\r\n                                <Icon name=\"remove\" />Cancel\r\n                            </Button>\r\n                        </Modal.Actions>\r\n                    </Modal>\r\n                </Grid.Column>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\nexport default UserPanel;","import React from \"react\";\r\nimport firebase from './../../firebase';\r\nimport { connect } from \"react-redux\";\r\nimport { setCurrentChannel, setPrivateChannel } from \"../../actions\";\r\nimport { Icon, Menu, Modal, Form, Input, Button, Label } from \"semantic-ui-react\";\r\n\r\nclass Channels extends React.Component {\r\n    state = {\r\n        user: this.props.currentUser,\r\n        channel: null,\r\n        channels: [],\r\n        channelName: '',\r\n        channelDetails: '',\r\n        modal: false,\r\n        channelsRef: firebase.database().ref('channels'),\r\n        messagesRef: firebase.database().ref('messages'),\r\n        typingRef: firebase.database().ref('typing'),\r\n        notifications: [],\r\n        firstLoad: true,\r\n        activeChannel: ''\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.addListeners();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.removeListeners();\r\n    }\r\n\r\n    addListeners = () => {\r\n        let loadedChannels = [];\r\n        this.state.channelsRef.on('child_added', snap => {\r\n            loadedChannels.push(snap.val());\r\n\r\n            this.setState({ channels: loadedChannels });\r\n            this.addNotificationListeners(snap.key);\r\n        });\r\n    }\r\n\r\n    addNotificationListeners = channelId => {\r\n        this.state.messagesRef.child(channelId).on('value', snap => {\r\n            if (this.state.channel) {\r\n                this.handleNotifications(channelId, this.state.channel.id, this.state.notifications, snap);\r\n            }\r\n        })\r\n    }\r\n\r\n    handleNotifications = (channelId, currentChannelId, notifications, snap) => {\r\n        let lastTotal = 0;\r\n        let index = notifications.findIndex(notification => notification.id === channelId);\r\n\r\n        if (index !== -1) {\r\n            if (channelId !== currentChannelId) {\r\n                lastTotal = notifications[index].total;\r\n\r\n                if (snap.numChildren() - lastTotal > 0) {\r\n                    notifications[index].count = snap.numChildren() - lastTotal;\r\n                }\r\n            }\r\n\r\n            notifications[index].lastKnowTotal = snap.numChildren();\r\n        } else {\r\n            notifications.push({\r\n                id: channelId,\r\n                total: snap.numChildren(),\r\n                lastKnowTotal: snap.numChildren(),\r\n                count: 0\r\n            });\r\n        }\r\n\r\n        this.setState({ notifications: notifications });\r\n    }\r\n\r\n    removeListeners = () => {\r\n        this.state.channelsRef.off();\r\n        this.state.channels.forEach(channel => { \r\n            this.state.messagesRef.child(channel.id).off();\r\n        });\r\n    }\r\n\r\n    setFirstChannel = () => {\r\n        const firstChannel = this.state.channels[0];\r\n        if (this.state.firstLoad && this.state.channels.length > 0) {\r\n            this.props.setCurrentChannel(firstChannel);\r\n\r\n            this.setState({ firstLoad: false, activeChannel: firstChannel.id });\r\n            this.setState({ channel: firstChannel })\r\n        }\r\n        this.setState({ firstLoad: false });\r\n    }\r\n\r\n    closeModal = () => this.setState({ modal: false });\r\n\r\n    openModal = () => this.setState({ modal: true });\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n\r\n    addChannel = () => {\r\n        const { channelsRef, channelName, channelDetails, user } = this.state;\r\n        const key = channelsRef.push().key;\r\n        const newChannel = {\r\n            id: key,\r\n            name: channelName,\r\n            details: channelDetails,\r\n            createdBy: user.uid\r\n        }\r\n\r\n        channelsRef.child(key).update(newChannel).then(() => {\r\n            this.setState({ channelName: '', channelDetails: '', modal: false });\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n\r\n    }\r\n\r\n    getNotificationCount = (channel) => {\r\n        let count = 0;\r\n        this.state.notifications.forEach(notification => {\r\n            if (notification.id === channel.id) {\r\n                count = notification.count;\r\n            }\r\n        });\r\n\r\n        if (count > 0) return count;\r\n    }\r\n\r\n    displayChannels = (channels) => {\r\n        return channels.length > 0 && channels.map(channel => (\r\n            <Menu.Item key={channel.id} onClick={() => this.changeChannel(channel)} name={channel.name} style={{ opacity: 0.7 }}\r\n                active={channel.id === this.state.activeChannel}>\r\n                {this.getNotificationCount(channel) && (<Label color=\"red\">{this.getNotificationCount(channel)}</Label>)}\r\n                # {channel.name}\r\n            </Menu.Item>\r\n        ));\r\n    }\r\n\r\n    changeChannel = (channel) => {\r\n        this.setActiveChannel(channel);\r\n\r\n        this.props.setCurrentChannel(channel);\r\n        this.props.setPrivateChannel(false);\r\n\r\n        this.setState({ channel: channel });\r\n\r\n        if (channel) {\r\n            this.state.typingRef\r\n                .child(channel.id)\r\n                .child(this.state.user.uid)\r\n                .remove();\r\n        }\r\n\r\n        this.clearNotifications();\r\n    }\r\n\r\n    clearNotifications = () => {\r\n        let index = this.state.notifications.findIndex(notification => notification.id === this.state.channel.id);\r\n\r\n        if (index !== -1) {\r\n            let updatedNotifications = [...this.state.notifications];\r\n            updatedNotifications[index].total = this.state.notifications[index].lastKnowTotal;\r\n            updatedNotifications[index].count = 0;\r\n\r\n            this.setState({ notifications: updatedNotifications });\r\n        }\r\n    }\r\n\r\n    setActiveChannel = (channel) => {\r\n        this.setState({ activeChannel: channel.id });\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (this.isFormValid(this.state)) {\r\n            this.addChannel();\r\n        }\r\n    }\r\n\r\n    isFormValid = ({ channelName, channelDetails }) => channelName && channelDetails;\r\n\r\n    render() {\r\n        const { channels, modal } = this.state;\r\n        return (\r\n            <React.Fragment>\r\n                <Menu.Menu className=\"menu\">\r\n                    <Menu.Item>\r\n                        <span>\r\n                            <Icon name=\"exchange\"></Icon>\r\n                            CHANNELS\r\n                        </span> {\" \"}\r\n                        ({channels.length}) <Icon name=\"add\" onClick={this.openModal} style={{ cursor: 'pointer' }} />\r\n                    </Menu.Item>\r\n\r\n                    {this.displayChannels(channels)}\r\n                </Menu.Menu>\r\n\r\n                <Modal basic open={modal} onClose={this.closeModal}>\r\n                    <Modal.Header>Add a Channel</Modal.Header>\r\n\r\n                    <Modal.Content>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <Form.Field>\r\n                                <Input fluid label=\"Name of Channel\" name=\"channelName\" onChange={this.handleChange} />\r\n                            </Form.Field>\r\n\r\n                            <Form.Field>\r\n                                <Input fluid label=\"Description\" name=\"channelDetails\" onChange={this.handleChange} />\r\n                            </Form.Field>\r\n                        </Form>\r\n                    </Modal.Content>\r\n\r\n                    <Modal.Actions>\r\n                        <Button color=\"green\" inverted onClick={this.handleSubmit}>\r\n                            <Icon name=\"checkmark\" />\r\n                            Add\r\n                        </Button>\r\n                        <Button color=\"red\" inverted onClick={this.closeModal}>\r\n                            <Icon name=\"remove\" />\r\n                            Cancel\r\n                        </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </ React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, { setCurrentChannel, setPrivateChannel })(Channels);","import React from \"react\";\r\nimport { Menu, Icon } from 'semantic-ui-react';\r\nimport { connect } from \"react-redux\";\r\nimport { setCurrentChannel, setPrivateChannel } from './../../actions';\r\n\r\nimport firebase from './../../firebase';\r\n\r\nclass DirectMessages extends React.Component {\r\n    state = {\r\n        activeChannel: '',\r\n        user: this.props.currentUser,\r\n        users: [],\r\n        usersRef: firebase.database().ref('users'),\r\n        connectedRef: firebase.database().ref('.info/connected'),\r\n        presenceRef: firebase.database().ref('presence')\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.state.user) {\r\n            this.addListeners(this.state.user.uid);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.remvoeListeners();\r\n    }\r\n\r\n    remvoeListeners = () => { \r\n        this.state.usersRef.off();\r\n        this.state.presenceRef.off();\r\n        this.state.connectedRef.off();\r\n    }\r\n\r\n    addListeners = (currentUserUid) => {\r\n        let loadedUsers = [];\r\n        this.state.usersRef.on('child_added', snap => {\r\n            if (currentUserUid !== snap.key) {\r\n                let user = snap.val();\r\n                user['uid'] = snap.key;\r\n                user['status'] = 'offline';\r\n                loadedUsers.push(user);\r\n                this.setState({ users: loadedUsers });\r\n            }\r\n        });\r\n\r\n        this.state.connectedRef.on('value', snap => {\r\n            if (snap.val() === true) {\r\n                const ref = this.state.presenceRef.child(currentUserUid);\r\n                ref.set(true);\r\n                ref.onDisconnect().remove(err => {\r\n                    if (err !== null) { }\r\n                })\r\n            }\r\n        });\r\n\r\n        this.state.presenceRef.on('child_added', snap => {\r\n            if (currentUserUid !== snap.key) {\r\n                this.addStatusToUser(snap.key);\r\n            }\r\n        });\r\n\r\n        this.state.presenceRef.on('child_removed', snap => {\r\n            if (currentUserUid !== snap.key) {\r\n                this.addStatusToUser(snap.key, false);\r\n            }\r\n        });\r\n    }\r\n\r\n    addStatusToUser = (userId, connected = true) => {\r\n        const updatedUsers = this.state.users.reduce((acc, user) => {\r\n            if (user.uid === userId) {\r\n                user['status'] = `${connected ? 'online' : 'offline'}`;\r\n            }\r\n            return acc.concat(user);\r\n        }, []);\r\n\r\n        this.setState({ users: updatedUsers });\r\n    }\r\n\r\n    isUserOnline = (user) => user.status === 'online';\r\n\r\n    changeChannel = (user) => {\r\n        const channelId = this.getChannelId(user.uid);\r\n        const channelData = {\r\n            id: channelId,\r\n            name: user.name\r\n        };\r\n\r\n        this.props.setCurrentChannel(channelData);\r\n        this.props.setPrivateChannel(true);\r\n        this.setActiveChannel(user.uid);\r\n    }\r\n\r\n    setActiveChannel = (userId) => {\r\n        this.setState({ activeChannel: userId });\r\n    }\r\n\r\n    getChannelId = (userId) => {\r\n        const currentUser = this.state.user.uid;\r\n        return userId < currentUser ? `${userId}/${currentUser}` : `${currentUser}/${userId}`;\r\n    }\r\n\r\n    render() {\r\n        const { users, activeChannel } = this.state;\r\n\r\n        return (\r\n            <Menu.Menu className=\"menu\">\r\n                <Menu.Item>\r\n                    <span>\r\n                        <Icon name=\"mail\" /> MESSAGES\r\n                    </span>{' '}\r\n                    ({users.length})\r\n                </Menu.Item>\r\n                {users.map(user => (\r\n                    <Menu.Item key={user.uid} onClick={() => this.changeChannel(user)} active={user.uid === activeChannel}\r\n                        style={{ opacity: 0.7, fontStyle: 'italic' }}>\r\n                        <Icon name=\"circle\" color={this.isUserOnline(user) ? 'green' : 'red'} />\r\n                        @ {user.name}\r\n                    </Menu.Item>\r\n                ))}\r\n            </Menu.Menu>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, { setCurrentChannel, setPrivateChannel })(DirectMessages);","import React from \"react\";\r\nimport { Menu, Icon } from 'semantic-ui-react';\r\nimport { setCurrentChannel, setPrivateChannel } from \"../../actions\";\r\nimport { connect } from 'react-redux';\r\nimport firebase from \"./../../firebase\";\r\n\r\nclass Starred extends React.Component {\r\n    state = {\r\n        user: this.props.currentUser,\r\n        usersRef: firebase.database().ref('users'),\r\n        starredChannels: [],\r\n        activeChannel: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.user) {\r\n            this.addListeners(this.state.user.uid);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.removeListeners()\r\n    }\r\n\r\n    removeListeners = () => {\r\n        this.state.usersRef.child(`${this.state.user.uid}/starred`).off();\r\n    }\r\n\r\n    addListeners = (userId) => {\r\n        this.state.usersRef\r\n            .child(userId)\r\n            .child('starred')\r\n            .on('child_added', snap => {\r\n                const starredChannel = { id: snap.key, ...snap.val() };\r\n\r\n                this.setState({\r\n                    starredChannels: [...this.state.starredChannels, starredChannel]\r\n                })\r\n            });\r\n\r\n        this.state.usersRef\r\n            .child(userId)\r\n            .child('starred')\r\n            .on('child_removed', snap => {\r\n                const channelToRemove = { id: snap.key, ...snap.val() };\r\n                const filteredChannels = this.state.starredChannels.filter(channel => {\r\n                    return channel.id !== channelToRemove.id;\r\n                });\r\n\r\n                this.setState({ starredChannels: filteredChannels });\r\n            });\r\n    }\r\n\r\n    changeChannel = (channel) => {\r\n        this.setActiveChannel(channel);\r\n        this.props.setCurrentChannel(channel);\r\n        this.props.setPrivateChannel(false);\r\n    }\r\n\r\n    setActiveChannel = (channel) => {\r\n        this.setState({ activeChannel: channel.id });\r\n    }\r\n\r\n    displayChannels = (starredChannels) => {\r\n        return starredChannels.length > 0 && starredChannels.map(starredChannel => (\r\n            <Menu.Item key={starredChannel.id} onClick={() => this.changeChannel(starredChannel)} name={starredChannel.name} style={{ opacity: 0.7 }}\r\n                active={starredChannel.id === this.state.activeChannel}>\r\n                # {starredChannel.name}\r\n            </Menu.Item>\r\n        ));\r\n    }\r\n\r\n    render() {\r\n        const { starredChannels } = this.state;\r\n\r\n        return (\r\n            <Menu.Menu className=\"menu\">\r\n                <Menu.Item>\r\n                    <span>\r\n                        <Icon name=\"heart\"></Icon>\r\n                        FAVORITE\r\n                    </span> {\" \"}\r\n                    ({starredChannels.length})\r\n\r\n\r\n                </Menu.Item>\r\n\r\n                {this.displayChannels(starredChannels)}\r\n            </Menu.Menu>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, { setCurrentChannel, setPrivateChannel })(Starred);","import React from \"react\";\r\nimport { Menu } from 'semantic-ui-react';\r\n\r\nimport UserPanel from \"./UserPanel\";\r\nimport Channels from \"./Channels\";\r\nimport DirectMessages from \"./DirectMessages\";\r\nimport Starred from \"./Starred\";\r\n\r\nclass SidePanel extends React.Component {\r\n    render() {\r\n        const { currentUser, primaryColor } = this.props;\r\n\r\n        return (\r\n            <Menu size=\"large\" inverted fixed=\"left\" vertical style={{ background: primaryColor, fontSize: '20px' }}>\r\n                <UserPanel currentUser={currentUser} primaryColor={primaryColor} />\r\n                <Starred currentUser={currentUser} />\r\n                <Channels currentUser={currentUser} />\r\n                <DirectMessages currentUser={currentUser} />\r\n            </Menu>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SidePanel;","import React from \"react\";\r\nimport { Header, Segment, Input, Icon } from 'semantic-ui-react';\r\n\r\nclass MessagesHeader extends React.Component {\r\n    render() {\r\n        const { channelName, numUniqUsers, handleSearchChange, searchLoading, isPrivateChannel, handleStar, isChannelStarred } = this.props;\r\n        return (\r\n            <Segment clearing>\r\n                <Header fluid=\"true\" as=\"h2\" floated=\"left\" style={{ marginBottom: 0 }}>\r\n                    <span>\r\n                        {channelName}\r\n                        {!isPrivateChannel &&\r\n                            <Icon onClick={handleStar} name={isChannelStarred ? 'star' : 'star outline'} color={isChannelStarred ? 'yellow' : 'black'} style={{ cursor: 'pointer' }} />}\r\n                    </span>\r\n\r\n                    <Header.Subheader>{numUniqUsers}</Header.Subheader>\r\n                </Header>\r\n                <Header floated=\"right\">\r\n                    <Input size=\"mini\" icon=\"search\" name=\"searchTerm\" placeholder=\"Search Messages\" onChange={handleSearchChange}\r\n                        loading={searchLoading} />\r\n                </Header>\r\n            </Segment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessagesHeader;","import React from \"react\";\r\nimport { Modal, Input, Button, Icon } from 'semantic-ui-react';\r\nimport mime from 'mime-types';\r\n\r\nclass FileModal extends React.Component {\r\n    state = {\r\n        file: null,\r\n        authorized: ['image/jpeg', 'image/png']\r\n    }\r\n\r\n    addFile = (event) => {\r\n        const file = event.target.files[0];\r\n\r\n        if (file) {\r\n            this.setState({ file });\r\n        }\r\n    }\r\n\r\n    sendFile = () => {\r\n        const { file } = this.state;\r\n        const { uploadFile, closeModal } = this.props;\r\n\r\n        if (file !== null) {\r\n            if (this.isAuthorized(file.name)) {\r\n                const metadata = { contentType: mime.lookup(file.name) };\r\n\r\n                uploadFile(file, metadata);\r\n                closeModal();\r\n\r\n                this.clearFile();\r\n            }\r\n        }\r\n    }\r\n\r\n    clearFile = () => this.setState({ file: null });\r\n\r\n    isAuthorized = (filename) => this.state.authorized.includes(mime.lookup(filename));\r\n\r\n    render() {\r\n        const { modal, closeModal } = this.props;\r\n        return (\r\n            <Modal basic open={modal} onClose={closeModal}>\r\n                <Modal.Header>Select an Image File</Modal.Header>\r\n\r\n                <Modal.Content>\r\n                    <Input fluid label=\"File types: jpg, png\" name=\"file\" type=\"file\" onChange={this.addFile} />\r\n                </Modal.Content>\r\n\r\n                <Modal.Actions>\r\n                    <Button onClick={this.sendFile} color=\"green\" inverted>\r\n                        <Icon name='checkmark' /> Upload\r\n                    </Button>\r\n\r\n                    <Button color=\"red\" inverted>\r\n                        <Icon name='remove' /> Cancel\r\n                    </Button>\r\n\r\n                </Modal.Actions>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FileModal;","import React from \"react\";\r\nimport { Progress } from \"semantic-ui-react\";\r\n\r\nconst ProgressBar = ({ uploadState, percentUploaded }) => (\r\n    uploadState === 'uploading' && (\r\n        <Progress className=\"progress__bar\" percent={percentUploaded} progress indicating size=\"medium\" inverted />\r\n    )\r\n);\r\n\r\nexport default ProgressBar;","import React from \"react\";\r\nimport uuidv4 from 'uuid/v4';\r\nimport { Segment, Button, Input } from 'semantic-ui-react';\r\nimport { Picker, emojiIndex } from 'emoji-mart';\r\nimport 'emoji-mart/css/emoji-mart.css';\r\n\r\n\r\nimport firebase from './../../firebase';\r\nimport FileModal from \"./FileModal\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nclass MessageForm extends React.Component {\r\n    state = {\r\n        message: '',\r\n        channel: this.props.currentChannel,\r\n        user: this.props.currentUser,\r\n        loading: false,\r\n        errors: [],\r\n        modal: false,\r\n        uploadState: '',\r\n        uploadTask: null,\r\n        storageRef: firebase.storage().ref(),\r\n        typingRef: firebase.database().ref('typing'),\r\n        percentUploaded: 0,\r\n        emojiPicker: false\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.uploadTask !== null) {\r\n            this.state.uploadTask.cancel();\r\n            this.setState({ uploadTask: null });\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n\r\n    handleKeyDown = (event) => {\r\n        if (event.keyCode === 13) {\r\n            this.sendMessage();\r\n        }\r\n        const { message, typingRef, channel, user } = this.state;\r\n\r\n        if (message) {\r\n            typingRef\r\n                .child(channel.id)\r\n                .child(user.uid)\r\n                .set(user.displayName);\r\n        } else {\r\n            this.removeTypingRef(channel.id, user.uid);\r\n        }\r\n    }\r\n\r\n    removeTypingRef(channelId, userId) {\r\n        const { typingRef } = this.state;\r\n\r\n        typingRef\r\n            .child(channelId)\r\n            .child(userId)\r\n            .remove();\r\n    }\r\n\r\n    createMessage = (fileUrl = null) => {\r\n        const message = {\r\n            timestamp: firebase.database.ServerValue.TIMESTAMP,\r\n            user: {\r\n                id: this.state.user.uid,\r\n                name: this.state.user.displayName\r\n            }\r\n        }\r\n\r\n        if (fileUrl !== null) {\r\n            message['image'] = fileUrl;\r\n        } else {\r\n            message['content'] = this.state.message;\r\n        }\r\n\r\n        return message;\r\n    }\r\n\r\n    openModal = () => this.setState({ modal: true });\r\n\r\n    closeModal = () => this.setState({ modal: false });\r\n\r\n    sendMessage = () => {\r\n        const { getMessagesRef } = this.props;\r\n        const { message, channel, user } = this.state;\r\n\r\n        if (message) {\r\n            this.setState({ loading: true });\r\n            getMessagesRef().child(channel.id).push().set(this.createMessage()).then(() => {\r\n                this.setState({ loading: false, message: '', error: [] });\r\n                this.removeTypingRef(channel.id, user.uid);\r\n            }).catch(err => {\r\n                this.setState({ loading: false, errors: this.state.errors.concat(err) });\r\n            });\r\n        } else {\r\n            this.setState({ errors: this.state.errors.concat({ message: 'Add a message' }) })\r\n        }\r\n    }\r\n\r\n    getPath = () => {\r\n        if (this.props.isPrivateChannel) {\r\n            return `chat/private/${this.state.channel.id}`;\r\n        } else {\r\n            return `chat/public`;\r\n        }\r\n    }\r\n\r\n    uploadFile = (file, metadata) => {\r\n        const pathToUpload = this.state.channel.id;\r\n        const ref = this.props.getMessagesRef();\r\n        const filePath = `${this.getPath()}/${uuidv4()}.jpeg`;\r\n\r\n        this.setState({ uploadState: 'uploading', uploadTask: this.state.storageRef.child(filePath).put(file, metadata) }, () => {\r\n            this.state.uploadTask.on('static_changed', snap => {\r\n                const percentUploaded = Math.round((snap.bytesTransferred / snap.totalBytes) * 100);\r\n                this.setState({ percentUploaded: percentUploaded });\r\n            }, err => {\r\n                this.setState({\r\n                    errors: this.state.errors.concat(err),\r\n                    uploadState: 'error',\r\n                    uploadTask: null\r\n                });\r\n            }, () => {\r\n                this.state.uploadTask.snapshot.ref.getDownloadURL().then(downloadUrl => {\r\n                    this.sendFileMessage(downloadUrl, ref, pathToUpload);\r\n                }).catch(err => {\r\n                    this.setState({\r\n                        errors: this.state.errors.concat(err),\r\n                        uploadState: 'error',\r\n                        uploadTask: null\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    sendFileMessage = (fileUrl, ref, pathToUpload) => {\r\n        ref.child(pathToUpload)\r\n            .push()\r\n            .set(this.createMessage(fileUrl))\r\n            .then(() => {\r\n                this.setState({ uploadState: 'done' });\r\n            })\r\n            .catch(err => {\r\n                this.setState({\r\n                    errors: this.state.errors.concat(err)\r\n                })\r\n            });\r\n    }\r\n\r\n    handleTogglePicker = () => {\r\n        this.setState({ emojiPicker: !this.state.emojiPicker });\r\n    }\r\n\r\n    colonToUnicode = message => {\r\n        return message.replace(/:[A-Za-z0-9_+-]+:/g, x => {\r\n            x = x.replace(/:/g, \"\");\r\n            let emoji = emojiIndex.emojis[x];\r\n            if (typeof emoji !== \"undefined\") {\r\n                let unicode = emoji.native;\r\n                if (typeof unicode !== \"undefined\") {\r\n                    return unicode;\r\n                }\r\n            }\r\n\r\n            x = \":\" + x + \":\";\r\n            return x;\r\n        });\r\n    }\r\n\r\n    handleAddEmoji = (emoji) => {\r\n        const oldMessage = this.state.message;\r\n        const newMessage = this.colonToUnicode(`${oldMessage} ${emoji.colons}`);\r\n        this.setState({ message: newMessage, emojiPicker: false });\r\n\r\n        setTimeout(() => {\r\n            this.messageInputRef.focus();\r\n        }, 0);\r\n    }\r\n\r\n    render() {\r\n        const { errors, message, loading, modal, uploadState, percentUploaded, emojiPicker } = this.state;\r\n\r\n        return (\r\n            <Segment className=\"message__form\">\r\n\r\n                {emojiPicker && (\r\n                    <Picker set=\"apple\" title=\"Pick your emoji\" emoji=\"point_up\" autoFocus onSelect={this.handleAddEmoji} />\r\n                )}\r\n\r\n                <Input fluid onChange={this.handleChange} name=\"message\" style={{ marginBottom: '20px' }} labelPosition=\"left\"\r\n                    label={<Button onClick={this.handleTogglePicker} icon={emojiPicker ? 'close' : 'add'} content={emojiPicker ? 'Close' : null} />}\r\n                    placeholder=\"Write your messages\" value={message} onKeyDown={this.handleKeyDown}\r\n                    className={errors.some(error => error.message.toLowerCase().includes('message')) ? 'error' : ''}\r\n                    ref={node => (this.messageInputRef = node)} />\r\n\r\n                <Button.Group icon widths=\"2\">\r\n                    <Button color=\"orange\" onClick={this.sendMessage} content=\"Add reply\" labelPosition=\"left\" icon=\"edit\" disabled={loading} />\r\n                    <Button color=\"teal\" onClick={this.openModal} disabled={uploadState === 'uploading'} content=\"Upload media\" labelPosition=\"right\" icon=\"cloud upload\" />\r\n                </Button.Group>\r\n\r\n                <FileModal modal={modal} closeModal={this.closeModal} uploadFile={this.uploadFile} />\r\n                <ProgressBar uploadState={uploadState} percentUploaded={percentUploaded} />\r\n            </Segment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageForm;","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport { Comment, Image } from 'semantic-ui-react';\r\n\r\nconst isOwnMessage = (message, user) => {\r\n    return message.user.id === user.uid ? 'message__self' : '';\r\n}\r\n\r\nconst isImage = (message) => {\r\n    return message.hasOwnProperty('image') && !message.hasOwnProperty('content');\r\n}\r\n\r\nconst timeFromNow = (timestamp) => moment(timestamp).fromNow();\r\n\r\n\r\nconst Message = ({ message, user }) => (\r\n    <Comment>\r\n        <Comment.Avatar src={message.user.avatar} />\r\n        <Comment.Content className={isOwnMessage(message, user)}>\r\n            <Comment.Author as=\"a\">{message.user.name}</Comment.Author>\r\n            <Comment.Metadata>\r\n                {timeFromNow(message.timestamp)}\r\n            </Comment.Metadata>\r\n            {\r\n                isImage(message) ?\r\n                    <Image src={message.image} className=\"message__image\" /> :\r\n                    <Comment.Text> {message.content} </Comment.Text>\r\n            }\r\n        </Comment.Content>\r\n    </Comment>\r\n);\r\n\r\nexport default Message;","import React from \"react\";\r\n\r\n\r\nconst Typing = () => (\r\n    <div className=\"typing\">\r\n        <div className=\"typing__dot\"></div>\r\n        <div className=\"typing__dot\"></div>\r\n        <div className=\"typing__dot\"></div>\r\n    </div>\r\n)\r\n\r\nexport default Typing;","import React from \"react\";\r\n\r\nconst Skeleton = () => (\r\n    <div className=\"skeleton\">\r\n        <div className=\"skeleton__avatar\"></div>\r\n        <div className=\"skeleton__author\"></div>\r\n        <div className=\"skeleton__details\"></div>\r\n    </div>\r\n)\r\n\r\nexport default Skeleton;","import React from \"react\";\r\nimport { Segment, Comment } from 'semantic-ui-react';\r\nimport MessagesHeader from './MessagesHeader';\r\nimport MessageForm from './MessageForm';\r\nimport Message from './Message';\r\nimport Typing from \"./Typing\";\r\nimport Skeleton from \"./Skeleton\";\r\n\r\nimport firebase from './../../firebase';\r\nimport { connect } from \"react-redux\";\r\nimport { setUserPosts } from './../../actions'\r\n\r\nclass Messages extends React.Component {\r\n    state = {\r\n        messagesRef: firebase.database().ref('messages'),\r\n        privateMessagesRef: firebase.database().ref('privateMessages'),\r\n        usersRef: firebase.database().ref('users'),\r\n        typingRef: firebase.database().ref('typing'),\r\n        connectedRef: firebase.database().ref('.info/connected'),\r\n        channel: this.props.currentChannel,\r\n        privateChannel: this.props.isPrivateChannel,\r\n        isChannelStarred: false,\r\n        user: this.props.currentUser,\r\n        messages: [],\r\n        messagesLoading: true,\r\n        numUniqUsers: '',\r\n        searchTerm: '',\r\n        searchLoading: false,\r\n        searchResults: [],\r\n        userList: this.props.userList,\r\n        typingUsers: [],\r\n        listeners: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        const { channel, user, listeners } = this.state;\r\n\r\n        if (channel && user) {\r\n            this.removeListeners(listeners);\r\n            this.addListeners(channel.id, user.uid);\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        const { messages } = this.state;\r\n\r\n        messages.forEach(message => {\r\n            const postCreator = this.getPostCreator(message, nextProps.userList);\r\n            message.user.avatar = postCreator.userData.avatar;\r\n        });\r\n\r\n        this.setState({ messages: messages });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.messagesEnd) {\r\n            this.scrollToBottom();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.removeListeners(this.state.listeners);\r\n        this.state.connectedRef.off();\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        this.messagesEnd.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n\r\n    addListeners = (channelId, userId) => {\r\n        this.addMessageListener(channelId);\r\n        this.addUserStarsListeners(channelId, userId);\r\n        this.addTypingListeners(channelId, userId);\r\n    }\r\n\r\n    addToListeners = (id, ref, event) => {\r\n        const index = this.state.listeners.findIndex(listener => {\r\n            return listener.id === id && listener.ref === ref && listener.event === event;\r\n        });\r\n\r\n        if (index === -1) {\r\n            const newListener = { id, ref, event };\r\n            this.setState({ listeners: this.state.listeners.concat(newListener) });\r\n        }\r\n    }\r\n\r\n    removeListeners = (listeners) => {\r\n        listeners.forEach(listener => {\r\n            listener.ref.child(listener.id).off(listener.event);\r\n        })\r\n    }\r\n\r\n    addMessageListener = channelId => {\r\n        let loadedMessages = [];\r\n        const ref = this.getMessagesRef();\r\n\r\n        ref.child(channelId).on('child_added', snap => {\r\n            const message = snap.val();\r\n            const postCreator = this.getPostCreator(message, this.state.userList);\r\n            message.user.avatar = (postCreator) ? postCreator.userData.avatar : '';\r\n\r\n            loadedMessages.push(message);\r\n\r\n            this.setState({ messages: loadedMessages, messagesLoading: false });\r\n\r\n            this.countUniqUsers(loadedMessages);\r\n            this.countUserPosts(loadedMessages);\r\n        });\r\n        this.addToListeners(channelId, ref, 'child_added');\r\n    }\r\n\r\n    addTypingListeners = (channelId, userId) => {\r\n        let typingUsers = [];\r\n\r\n        this.state.typingRef\r\n            .child(channelId)\r\n            .on('child_added', snap => {\r\n                if (snap.key !== userId) {\r\n                    typingUsers = typingUsers.concat({\r\n                        id: snap.key,\r\n                        name: snap.val()\r\n                    });\r\n\r\n                    this.setState({ typingUsers: typingUsers })\r\n                }\r\n            });\r\n        this.addToListeners(channelId, this.state.typingRef, 'child_added');\r\n\r\n        this.state.typingRef\r\n            .child(channelId)\r\n            .on('child_removed', snap => {\r\n                const index = typingUsers.findIndex(user => user.id === snap.key);\r\n                if (index !== -1) {\r\n                    typingUsers = typingUsers.filter(user => user.id !== snap.key);\r\n                    this.setState({ typingUsers: typingUsers })\r\n                }\r\n            });\r\n        this.addToListeners(channelId, this.state.typingRef, 'child_removed');\r\n\r\n        this.state.connectedRef.on('value', snap => {\r\n            if (snap.val() === true) {\r\n                this.state.typingRef\r\n                    .child(channelId)\r\n                    .child(this.state.user.uid)\r\n                    .onDisconnect()\r\n                    .remove(err => {\r\n                        if (err !== null) {\r\n                            console.log(err);\r\n                        }\r\n                    })\r\n            }\r\n        });\r\n    }\r\n\r\n    getPostCreator = (message, userList) => {\r\n        const { user } = message;\r\n        const postCreator = userList.find(listedUser => {\r\n            return listedUser.userId === user.id;\r\n        })\r\n        return postCreator;\r\n    }\r\n\r\n    addUserStarsListeners = (channelId, userId) => {\r\n        this.state.usersRef\r\n            .child(userId)\r\n            .child('starred')\r\n            .once('value')\r\n            .then(data => {\r\n                if (data.val() !== null) {\r\n                    const channelIds = Object.keys(data.val());\r\n                    const prevStarred = channelIds.includes(channelId);\r\n                    this.setState({ isChannelStarred: prevStarred });\r\n                }\r\n            })\r\n    }\r\n\r\n    getMessagesRef = () => {\r\n        const { messagesRef, privateMessagesRef, privateChannel } = this.state;\r\n\r\n        return privateChannel ? privateMessagesRef : messagesRef;\r\n    }\r\n\r\n    countUniqUsers = (messages) => {\r\n        const uniqUsers = messages.reduce((acc, message) => {\r\n            if (!acc.includes(message.user.name)) {\r\n                acc.push(message.user.name);\r\n            }\r\n\r\n            return acc;\r\n        }, []);\r\n\r\n        const numUniqUsers = `${uniqUsers.length} users`;\r\n        this.setState({ numUniqUsers: numUniqUsers })\r\n    }\r\n\r\n    countUserPosts = (messages) => {\r\n        let userPosts = messages.reduce((acc, message) => {\r\n            if (message.user.name in acc) {\r\n                acc[message.user.name].count += 1;\r\n            } else {\r\n                acc[message.user.name] = {\r\n                    avatar: message.user.avatar,\r\n                    count: 1\r\n                }\r\n            }\r\n            return acc;\r\n        }, []);\r\n\r\n        this.props.setUserPosts(userPosts);\r\n    }\r\n\r\n    displayMessages = (messages) => (\r\n        messages.length > 0 && messages.map(message => {\r\n            return <Message key={message.timestamp} message={message} user={this.state.user} />\r\n        })\r\n    )\r\n\r\n    displayChannelName = (channel) => {\r\n        return channel ?\r\n            `${this.state.privateChannel ? '@' : '#'}${channel.name}` : ''\r\n    }\r\n\r\n    handleSearchChange = (event) => {\r\n        this.setState({ searchTerm: event.target.value, searchLoading: true }, () => {\r\n            this.handleSearchMessages();\r\n        });\r\n    }\r\n\r\n    handleSearchMessages = () => {\r\n        const channelMessages = [...this.state.messages];\r\n        const regex = new RegExp(this.state.searchTerm, 'gi');\r\n        const searchResults = channelMessages.reduce((acc, message) => {\r\n            if ((message.content && message.content.match(regex)) || message.user.name.match(regex)) {\r\n                acc.push(message);\r\n            }\r\n\r\n            return acc;\r\n        }, []);\r\n\r\n        this.setState({ searchResults: searchResults });\r\n        setTimeout(() => {\r\n            this.setState({ searchLoading: false });\r\n        }, 1000);\r\n    }\r\n\r\n    handleStar = () => {\r\n        this.setState(prevState => ({\r\n            isChannelStarred: !prevState.isChannelStarred\r\n        }), () => this.starChannel());\r\n    }\r\n\r\n    starChannel = () => {\r\n        if (this.state.isChannelStarred) {\r\n            this.state.usersRef\r\n                .child(`${this.state.user.uid}/starred`)\r\n                .update({\r\n                    [this.state.channel.id]: {\r\n                        name: this.state.channel.name,\r\n                        details: this.state.channel.details,\r\n                        createdBy: this.state.channel.createdBy\r\n                    }\r\n                })\r\n        } else {\r\n            this.state.usersRef\r\n                .child(`${this.state.user.uid}/starred`)\r\n                .child(this.state.channel.id)\r\n                .remove(err => {\r\n                    if (err !== null) {\r\n                        console.log(err);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    displayTypingUsers = (users) => {\r\n        return users.length > 0 && users.map(user => {\r\n            return <div key={user.id} style={{ display: 'flex', alignItems: 'center', marginBottom: '4px' }}>\r\n                <span className=\"user__typing\">{user.name}</span> <Typing />\r\n            </div>\r\n        });\r\n    }\r\n\r\n    displayMessageSkeleton = (loading) => (\r\n        loading ? (\r\n            <React.Fragment>\r\n                {[...Array(10)].map((_, i) => {\r\n                    return <Skeleton key={i} />\r\n                })}\r\n            </React.Fragment>\r\n        ) : null\r\n    )\r\n\r\n    render() {\r\n        const { messagesRef, channel, user, messages, numUniqUsers, searchTerm, searchResults, searchLoading, privateChannel, isChannelStarred, typingUsers, messagesLoading } = this.state;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <MessagesHeader channelName={this.displayChannelName(channel)} numUniqUsers={numUniqUsers} handleSearchChange={this.handleSearchChange}\r\n                    searchLoading={searchLoading} isPrivateChannel={privateChannel} handleStar={this.handleStar} isChannelStarred={isChannelStarred} />\r\n\r\n                <Segment>\r\n                    <Comment.Group className=\"messages\">\r\n                        {this.displayMessageSkeleton(messagesLoading)}\r\n\r\n                        {searchTerm ? this.displayMessages(searchResults) : this.displayMessages(messages)}\r\n\r\n                        {this.displayTypingUsers(typingUsers)}\r\n\r\n                        <div ref={node => (this.messagesEnd = node)}></div>\r\n                    </Comment.Group>\r\n                </Segment>\r\n\r\n                <MessageForm messagesRef={messagesRef} currentChannel={channel} currentUser={user} isPrivateChannel={privateChannel} getMessagesRef={this.getMessagesRef} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, { setUserPosts })(Messages);","import React from \"react\";\r\nimport { Segment, Accordion, Header, Icon, Image, List } from 'semantic-ui-react';\r\n\r\nclass MetaPanel extends React.Component {\r\n    state = {\r\n        activeIndex: 0,\r\n        channel: this.props.currentChannel,\r\n        privateChannel: this.props.isPrivateChannel,\r\n        userList: this.props.userList\r\n    };\r\n\r\n    componentDidMount() {\r\n        const { channel, userList, privateChannel } = this.state;\r\n\r\n        if (channel && userList.length && !privateChannel) {\r\n            const channelCreator = this.getChannelCreator(channel, userList);\r\n            channel.creatorData = channelCreator.userData;\r\n\r\n            this.setState({ channel: channel });\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        const { channel, privateChannel } = this.state;\r\n\r\n        if (channel && nextProps.userList.length && !privateChannel) {\r\n            const channelCreator = this.getChannelCreator(channel, nextProps.userList);\r\n            channel.creatorData = channelCreator.userData;\r\n\r\n            this.setState({ channel: channel });\r\n        }\r\n    }\r\n\r\n\r\n    getChannelCreator = (channel, userList) => {\r\n        const { createdBy } = channel;\r\n        const channelCreator = userList.find(listedUser => {\r\n            return listedUser.userId === createdBy;\r\n        })\r\n        return channelCreator;\r\n    }\r\n\r\n    setActiveIndex = (event, titleProps) => {\r\n        const { index } = titleProps;\r\n        const { activeIndex } = this.state;\r\n        const newIndex = activeIndex === index ? -1 : index;\r\n\r\n        this.setState({ activeIndex: newIndex });\r\n    }\r\n\r\n    displayTopPosters = (posts) => {\r\n        return Object.entries(posts)\r\n            .sort((a, b) => b[1] - a[1])\r\n            .map(([key, val], i) => (\r\n                <List.Item key={i}>\r\n                    <Image avatar src={val.avatar} />\r\n                    <List.Content>\r\n                        <List.Header as=\"a\">{key}</List.Header>\r\n                        <List.Description>{val.count} posts</List.Description>\r\n                    </List.Content>\r\n                </List.Item>\r\n            )).splice(0, 3);\r\n    }\r\n\r\n    render() {\r\n        const { activeIndex, privateChannel, channel } = this.state;\r\n        const { userPosts } = this.props;\r\n\r\n        if (privateChannel) return null;\r\n\r\n        return (\r\n            <Segment loading={!channel}>\r\n                <Header as=\"h3\" attached=\"top\">\r\n                    About # {channel && channel.name}\r\n                </Header>\r\n                <Accordion styled attached=\"true\">\r\n                    <Accordion.Title active={activeIndex === 0} index={0} onClick={this.setActiveIndex}>\r\n                        <Icon name=\"dropdown\" />\r\n                        <Icon name=\"info\" />\r\n                        DETAILS\r\n                    </Accordion.Title>\r\n\r\n                    <Accordion.Content active={activeIndex === 0}>\r\n                        {channel && channel.details}\r\n                    </Accordion.Content>\r\n\r\n                    <Accordion.Title active={activeIndex === 1} index={1} onClick={this.setActiveIndex}>\r\n                        <Icon name=\"dropdown\" />\r\n                        <Icon name=\"user circle\" />\r\n                        TOP POSTERS\r\n                    </Accordion.Title>\r\n\r\n                    <Accordion.Content active={activeIndex === 1}>\r\n                        <List>\r\n                            {userPosts && this.displayTopPosters(userPosts)}\r\n                        </List>\r\n                    </Accordion.Content>\r\n\r\n                    <Accordion.Title active={activeIndex === 2} index={2} onClick={this.setActiveIndex}>\r\n                        <Icon name=\"dropdown\" />\r\n                        <Icon name=\"pencil alternate\" />\r\n                        CREATED BY\r\n                    </Accordion.Title>\r\n\r\n                    <Accordion.Content active={activeIndex === 2}>\r\n                        <Header as=\"h3\">\r\n                            <Image circular src={channel && channel.creatorData && channel.creatorData.avatar} />\r\n                            {channel && channel.creatorData && channel.creatorData.name}\r\n                        </Header>\r\n                    </Accordion.Content>\r\n                </Accordion>\r\n            </Segment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MetaPanel;","import React from \"react\";\nimport { Grid } from 'semantic-ui-react';\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\n\nimport ColorPanel from \"./ColorPanel/ColorPanel\";\nimport SidePanel from \"./SidePanel/SidePanel\";\nimport Messages from \"./Messages/Messages\";\nimport MetaPanel from \"./MetaPanel/MetaPanel\";\n\nconst App = ({ currentUser, currentChannel, isPrivateChannel, userPosts, primaryColor, secondaryColor, userList }) => (\n  <Grid columns=\"equal\" className=\"app\" style={{ background: secondaryColor, margin: -20 }}>\n    <ColorPanel key={currentUser && currentUser.name} currentUser={currentUser} />\n    <SidePanel key={currentUser && currentUser.uid} currentUser={currentUser} primaryColor={primaryColor} />\n\n    {currentChannel &&\n      <Grid.Column style={{ marginLeft: 340, marginTop: 20 }}>\n        <Messages key={currentChannel && currentChannel.id} currentChannel={currentChannel} currentUser={currentUser} isPrivateChannel={isPrivateChannel}\n          userList={userList} />\n      </Grid.Column>}\n\n    {currentChannel &&\n      <Grid.Column style={{ marginTop: 20, marginRight: 20 }} width={4}>\n        <MetaPanel key={currentChannel && currentChannel.name} currentChannel={currentChannel} isPrivateChannel={isPrivateChannel} userPosts={userPosts}\n          userList={userList} />\n      </Grid.Column>}\n\n    {!currentChannel &&\n      <Grid.Column style={{ marginLeft: 320 }}>\n        <div className=\"notfound\">\n          <div className=\"notfound-404\">\n            <h1> <span>Secret Society</span></h1>\n          </div>\n          <h2>No channels, please select or create a channel to get started</h2>\n        </div>\n      </Grid.Column>}\n  </Grid>\n);\n\nconst mapStateToProbs = (state) => ({\n  currentUser: state.user.currentUser,\n  currentChannel: state.channel.currentChannel,\n  isPrivateChannel: state.channel.isPrivateChannel,\n  userPosts: state.channel.userPosts,\n  primaryColor: state.colors.primaryColor,\n  secondaryColor: state.colors.secondaryColor,\n  userList: state.userCache.userList\n})\n\nexport default connect(mapStateToProbs)(App);\n"],"sourceRoot":""}